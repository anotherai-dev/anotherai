from collections.abc import Iterator, Sequence
from typing import Any

class NameAliasMixin:
    def get_real_name(self): ...
    def get_alias(self):  # -> None:
        ...

class Token:
    value: Any
    ttype: Any
    parent: Token | None
    is_group: bool
    is_keyword: bool
    is_whitespace: bool
    is_newline: bool
    normalized: str

    def flatten(self):  # -> Generator[Self, Any, None]:
        ...
    def match(self, ttype, values, regex=...):  # -> bool:
        ...
    def within(self, group_cls):  # -> bool:
        ...
    def is_child_of(self, other): ...
    def has_ancestor(self, other):  # -> bool:
        ...

class TokenList(Token):
    tokens: Sequence[Token]
    __slots__ = ...
    def __init__(self, tokens=...) -> None: ...
    def __iter__(self) -> Iterator[Token]:  # -> Iterator[Any]:
        ...
    def __getitem__(self, item): ...
    def get_token_at_offset(self, offset):  # -> None:
        ...
    def flatten(self):  # -> Generator[Any, Any, None]:
        ...
    def get_sublists(self):  # -> Generator[Any, Any, None]:
        ...
    def token_first(self, skip_ws=..., skip_cm=...):  # -> None:
        ...
    def token_next_by(self, i=..., m=..., t=..., idx=..., end=...):  # -> tuple[int, Any] | tuple[None, None] | None:
        ...
    def token_not_matching(self, funcs, idx):  # -> tuple[int, Any] | tuple[None, None] | None:
        ...
    def token_matching(self, funcs, idx):  # -> None:
        ...
    def token_prev(self, idx, skip_ws=..., skip_cm=...):  # -> tuple[None, None] | tuple[int, Any] | None:
        ...
    def token_next(self, idx, skip_ws=..., skip_cm=..., _reverse=...):  # -> tuple[None, None] | tuple[int, Any] | None:
        ...
    def token_index(self, token, start=...):  # -> int:
        ...
    def group_tokens(self, grp_cls, start, end, include_end=..., extend=...): ...
    def insert_before(self, where, token):  # -> None:
        ...
    def insert_after(self, where, token, skip_ws=...):  # -> None:
        ...
    def has_alias(self):  # -> bool:
        ...
    def get_alias(self):  # -> None:
        ...
    def get_name(self):  # -> None:
        ...
    def get_real_name(self):  # -> None:
        ...
    def get_parent_name(self):  # -> None:
        ...

class Statement(TokenList):
    def get_type(self):  # -> Literal['UNKNOWN']:
        ...

class Identifier(NameAliasMixin, TokenList):
    def is_wildcard(self):  # -> bool:
        ...
    def get_typecast(self):  # -> None:
        ...
    def get_ordering(self):  # -> None:
        ...
    def get_array_indices(self):  # -> Generator[Any | list[Any], Any, None]:
        ...

class IdentifierList(TokenList):
    def get_identifiers(self):  # -> Generator[Any, Any, None]:
        ...

class TypedLiteral(TokenList):
    M_OPEN = ...
    M_CLOSE = ...
    M_EXTEND = ...

class Parenthesis(TokenList):
    M_OPEN = ...
    M_CLOSE = ...

class SquareBrackets(TokenList):
    M_OPEN = ...
    M_CLOSE = ...

class Assignment(TokenList): ...

class If(TokenList):
    M_OPEN = ...
    M_CLOSE = ...

class For(TokenList):
    M_OPEN = ...
    M_CLOSE = ...

class Comparison(TokenList):
    @property
    def left(self): ...
    @property
    def right(self): ...

class Comment(TokenList):
    def is_multiline(self):  # -> list[Any]:
        ...

class Where(TokenList):
    M_OPEN = ...
    M_CLOSE = ...

class Over(TokenList):
    M_OPEN = ...

class Having(TokenList):
    M_OPEN = ...
    M_CLOSE = ...

class Case(TokenList):
    M_OPEN = ...
    M_CLOSE = ...
    def get_cases(self, skip_ws=...):  # -> list[Any]:
        ...

class Function(NameAliasMixin, TokenList):
    def get_parameters(self):  # -> Generator[Any, Any, None] | list[Any]:
        ...
    def get_window(self):  # -> None:
        ...

class Begin(TokenList):
    M_OPEN = ...
    M_CLOSE = ...

class Operation(TokenList): ...
class Values(TokenList): ...
class Command(TokenList): ...
